//solution is correct but too slow to pass hackerrank test

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static int pairs(int k, int[] arr) {
        int nPairs = 0;
        int n = arr.length;
        int currentInt = 0 ;
        
          
        LinkedHashMap<Integer,Integer> hm=new LinkedHashMap<Integer,Integer>(); 
        for(int arr_i = 0; arr_i < n; arr_i++){
            hm.put(arr[arr_i], arr[arr_i] );
        } 
        
       // Map.Entry<Integer, Integer> lastEntry = hm.lastEntry();
         for(Map.Entry<Integer, Integer> entry: hm.entrySet()){    
            currentInt = entry.getValue();    
            // if(currentInt + k <= lastEntry.getValue()){
                if(hm.containsValue(currentInt + k)){
                    nPairs++; 
                  //  entry = hm.get(currentInt + k);
                }    
           //  }else{
          //       break;
          //   }  
            
         }    

        return nPairs;
    }


    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int k = in.nextInt();
        int[] arr = new int[n];
        for(int arr_i = 0; arr_i < n; arr_i++){
            arr[arr_i] = in.nextInt();
        }
        int result = pairs(k, arr);
        System.out.println(result);
        in.close();
    }
}
