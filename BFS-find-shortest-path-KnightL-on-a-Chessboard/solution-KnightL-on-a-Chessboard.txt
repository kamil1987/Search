import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;



public class Solution {
 
    
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int [][]matrix = new int [n][n];
         int counter;
        
        Queue<Integer>  xQueue =new LinkedList<Integer>();
        Queue<Integer>  yQueue =new LinkedList<Integer>();
        Queue<Integer>  moves  =new LinkedList<Integer>();
        
        
        // not refactored code, instead of multiple if, you may write possible moves in some container.
        for(int j = 1 ; j < n ; j++){
            
            for(int i = 1 ; i < n ; i++){
                
                //prepare for next moves, clear all containers
                resetMatrix(matrix, n);
                xQueue.clear();
                yQueue.clear();
                moves.clear();
                
                counter = 0;
                matrix[0][0] = 1;
                xQueue.add(0);
                yQueue.add(0);
                moves.add(1);
                
                //checking possible moves in all direction
                // x + i y + j
                // x - i y - j
                // x + i y - j
                // x - i y + j
                
                // x + j y + i
                // x - j y - i
                // x + j y - i
                // x - j y + i 
                
                //do for given move (1,1) (1,2) etc.
                
                //BFS
                while(!xQueue.isEmpty() && !yQueue.isEmpty()){
                  
                    int x = xQueue.poll();
                    int y = yQueue.poll();
                    int nMoves = moves.poll();
                    
                   // x + i y + j
                    if(x + i < n && y + j < n && matrix[x + i][y + j] == 0){
                        
                        //check if x,y is last position
                        if(x + i == n-1 && y + j == n-1){
                            System.out.print(  nMoves + " ");
                            break;
                        //if not reached end, put on the queue and mark position as visited
                        }else{
                                xQueue.add(x + i);
                                yQueue.add(y + j);
                                moves.add(nMoves+1);
                                matrix[x + i][y + j] = 1;
                    
                        } 
                    }

                    // x - i y - j
                    if(x - i >= 0 && y - j >= 0 && matrix[x - i][y - j] == 0){
                        if(x - i == n-1 && y - j == n-1){
                           System.out.print(  nMoves + " ");
                            break;
                        }else{
                                 xQueue.add(x - i);
                                 yQueue.add(y - j);
                                moves.add(nMoves+1);
                                matrix[x - i][y - j] = 1;
                      
                        } 
                    }

                    // x + i y - j
                    if(x + i < n && y - j >= 0 && matrix[x + i][y - j] == 0){
                        if(x + i == n-1 && y - j == n-1){
                            System.out.print(  nMoves + " ");
                            break;
                        }else{
                                xQueue.add(x + i);
                                yQueue.add(y - j);
                                moves.add(nMoves+1);
                                matrix[x + i][y - j] = 1;
                      
                        }
                    }

                    // x - i y + j
                    if(x - i >= 0 && y + j < n && matrix[x - i][y + j] == 0){
                        if(x - i == n-1 && y + j == n-1){
                            System.out.print(  nMoves + " ");
                            break;
                        }else{
                                xQueue.add(x - i);
                                yQueue.add(y + j);
                                moves.add(nMoves+1);
                                matrix[x - i][y + j] = 1;
                      
                        }
                    }

                    //change i -> j j->i
                    
                    
                    // x + j y + i
                    if(x + j < n && y + i < n && matrix[x + j][y + i] == 0){
                        if(x + j == n-1 && y + i == n-1){
                            System.out.print(  nMoves + " ");
                            break;
                        }else{
                                xQueue.add(x + j);
                                yQueue.add(y + i);
                                moves.add(nMoves+1);
                                matrix[x + j][y + i] = 1;
                     
                        } 
                    }

                    // x - j y - i
                    if(x - j >= 0 && y - i >= 0 && matrix[x - j][y - i] == 0){
                        if(x - j == n-1 && y - i == n-1){
                            System.out.print(  nMoves + " ");
                            break;
                        }else{
                                 xQueue.add(x - j);
                                 yQueue.add(y - i);
                                moves.add(nMoves+1);
                                matrix[x - j][y - i] = 1;
                     
                        } 
                    }

                    // x + j y - i
                    if(x + j < n && y - i >= 0 && matrix[x + j][y - i] == 0){
                        if(x + j == n-1 && y - i == n-1){
                            System.out.print(  nMoves + " ");
                            break;
                        }else{
                                xQueue.add(x + j);
                                yQueue.add(y - i);
                                moves.add(nMoves+1);
                                matrix[x + j][y - i] = 1;
                       
                        }
                    }

                    // x - j y + i 
                    if(x - j >= 0 && y + i < n && matrix[x - j][y + i] == 0){
                        if(x - j == n-1 && y + i == n-1){
                            System.out.print(  nMoves + " ");
                            break;
                        }else{
                                xQueue.add(x - j);
                                yQueue.add(y + i);
                                moves.add(nMoves+1);
                                matrix[x - j][y + i] = 1;
                         
                        }
                    }
                    
                    
                    if (xQueue.isEmpty() && yQueue.isEmpty()){
                        System.out.print("-1 ");
                    }
                } // end of main while
            }
 System.out.println( );
        }
    }
    public static void resetMatrix(int [][] matrix, int n){
            for(int i = 0 ; i < n ; i++){
                 for(int j = 0 ; j < n ; j++){
                     matrix[i][j] = 0;
                 }
            }
    }
    
   
   
}
